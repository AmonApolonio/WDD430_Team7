// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  profilePictureUrl String?
  memberSince       DateTime @default(now())
  isSeller          Boolean  @default(false)
  productCount      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  cartItems       CartItem[]
  orders          Order[]
  products        Product[]  @relation("ProductSeller")
  reviewsWritten  Review[]   @relation("ReviewAuthor")
  reviewsReceived Review[]   @relation("ReviewTarget")

  @@map("users")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Decimal       @db.Decimal(10, 2)
  imageUrl    String?
  images      String[]      @default([])
  category    String
  stock       Int           @default(0)
  sellerId    String
  sku         String?       @unique
  material    String?
  capacity    String?
  dimensions  String?
  weight      String?
  careInstructions String?
  status      ProductStatus @default(ACTIVE)
  views       Int           @default(0)
  featured    Boolean       @default(false)
  tags        String[]      @default([])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  seller       User          @relation("ProductSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]

  @@map("products")
}


model Review {
  id          String   @id @default(cuid())
  productId   String
  authorId    String
  targetId    String   // The seller being reviewed
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  isHelpful   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  author  User    @relation("ReviewAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  target  User    @relation("ReviewTarget", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([productId, authorId])
  @@map("reviews")
}

enum ProductStatus {
  ACTIVE
  DRAFT
  OUT_OF_STOCK
  ARCHIVED
  DISCONTINUED
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
